/*!
 * =============================================
 * SORCERY GRIDS 1.0.0 - CSS! (╯°□°）╯ NYAAA!
 * =============================================
 *
 * http://github.com/mikehdt/sorcery-grids
 */

// Sorcery is based on ideas and open-source code from the incredibly
// talented Harry Roberts at csswizardry.com - thank you!
//
// Sorcery expands upon CSS-Wizardry Grids and was generally mixed and
// messed about with black magic and science by Mike Hopkins at dthought.net
//
// Take it, modify it, make it your own. Have fun with it!

// Note: It is recommended to copy and override the configuration values in
// your own file before including the grid system, rather than editing here.

// -----------
// Breakpoints
// -----------
//
// Here is how to set the various breakpoints which will be generated.
// The default base breakpoints are available at all sizes.
//
// Media query breakpoints follow the convention of:
//
// breakpoint name - no spaces, will be used in the class name
//     "media query" - any valid media query is fine here, no limits
//     (grid divisions to generate) - numbers separated by spaces e.g., 2 4 8
//     (OPTIONAL: push/pull/shift/unshift divisions to generate; (0) for none),
//
// If you want the push/pull/shift/unshift divisions to be the same as the
// generated grids, you can leave off the push line and the grid line will be
// used instead.
//
// Push and pull classes use margins to offset. Shift and unshift use left and
// right to overlay and swap space.
//
// A comma follows each set of items except for the last. You can have as many
// or as few breakpoints as you need. Of course, if you're going to make a
// fixed website, you can ignore them.

$grids-base:   (2 3 4 6 8)!default;
$offsets-base: (2 4 8)!default;

$breakpoints: (
	port
		"(max-width: 979px)"
		(2 3 4 6 8)
		(2 4 8),

	lap
		"(max-width: 979px) and (min-width: 720px)"
		(2 4 6)
		(2 4),

	tab
		"(max-width: 719px) and (min-width: 568px)"
		(2 4),

	phab
		"(max-width: 567px) and (min-width: 480px)"
		(2 4)
		(2),

	palm
		"(max-width: 479px)"
		(2)
		(0)
)!default;

// ---------------------
// General Configuration
// ---------------------
//
// These are the general options which control how and what the system will
// generate. You should not need to edit anything beyond this section.
//
// 1.  Whether to generate responsive (media query) breakpoints or not
// 2.  If mobile first, all block items are assumed 100% width unless specified
// 3.  Only generate one class e.g., 1/2 but ignore 2/4
// 4.  Static classes are your standard classes available all the time
// 5.  Silent classes are intended to be used selectively with @extend
// 6.  Generate horizontal alignment classes
// 7.  Generate vertical alignment classes
// 8.  Generate reversible grid modifiers
// 9.  Generate push, pull, shift or unshift classes
// 10. If using a gutter, the amount of spacing - recommend using rem or px
// 11. Default gutter type, valid values are: equal, offset, none
// 12. Whether to generate gutter width variations, for wide and narrow gutters
// 13. Whether to generate none (i.e., remove), equal or offset gutter modifiers
// 14. The namespace of the grid system
// 15. Whether to use the namespace for grid names or not
// 16. Set to true for ratios as names, false for ratios as numbers

$responsive:            true!default;	// [1]
$mobile-first:          false!default;	// [2]
$ignore-duplicates:     true!default;	// [3]
$use-static-classes:    true!default;	// [4]
$use-silent-classes:    false!default;	// [5]
$use-align-horizontal:  false!default;	// [6]
$use-align-vertical:    false!default;	// [7]
$use-reversible:        false!default;	// [8]
$use-push:              false!default;	// [9]
$use-pull:              false!default;	// [9]
$use-shift:             false!default;	// [9]
$use-unshift:           false!default;	// [9]
$gutter:                1rem!default;	// [10]
$gutter-type:           equal!default;	// [11]
$use-gutter-widths:     false!default;	// [12]
$use-gutter-none:       false!default;	// [13]
$use-gutter-equal:      false!default;	// [13]
$use-gutter-offset:     false!default;	// [13]
$namespace:             sg!default;		// [14]
$use-grid-namespace:    true!default;	// [15]
$use-ratio-names:       false!default;	// [16]










// =============================================== //
// =============== HERE BE DRAGONS =============== //
// =============================================== //










// ----------------
// Global Variables
// ----------------

$_percentages: ();
$_ratios: ();

// Note: Names used in the logic are a breakpoint for the whole structure,
// media-query, grid-set and modifier-set.

// ---------------------
// Grid System Functions
// ---------------------

// FUNCTION class-gen
//
// Generates static, silent or both static and silent class names depending
// on the $use-*-classes configuration variables.

@function class-gen ($class-name, $rel-prefix:"") {
	@if $use-silent-classes and $use-static-classes {
		@return $rel-prefix + "%"+ $class-name +", "+ $rel-prefix +"."+ $class-name;
	}
	@else if $use-silent-classes {
		@return $rel-prefix + "%"+ $class-name;
	}
	@else if $use-static-classes {
		@return $rel-prefix +"."+ $class-name;
	}

	@warn "Both ‘$use-static-classes’ and ‘$use-silent-classes’ are set to false";
}

// FUNCTION ratio-gen
//
// Generate ratio names, either numeric or textual, depending on configuration

@function ratio-gen ($numerator, $denominator) {
	@if $use-ratio-names {
		$numerator-name: "";
		$denominator-name: "";

		// Numerator
		@if      $numerator == 1    { $numerator-name: "one";        }
		@else if $numerator == 2    { $numerator-name: "two";        }
		@else if $numerator == 3    { $numerator-name: "three";      }
		@else if $numerator == 4    { $numerator-name: "four";       }
		@else if $numerator == 5    { $numerator-name: "five";       }
		@else if $numerator == 6    { $numerator-name: "six";        }
		@else if $numerator == 7    { $numerator-name: "seven";      }
		@else if $numerator == 8    { $numerator-name: "eight";      }
		@else if $numerator == 9    { $numerator-name: "nine";       }
		@else if $numerator == 10   { $numerator-name: "ten";        }
		@else if $numerator == 11   { $numerator-name: "eleven";     }
		@else {
			@warn "Named numerator for ‘#{$numerator}’ is not supported";
		}

		// Denominator
		@if      $denominator == 1  { $denominator-name: "whole";    }
		@else if $denominator == 2  { $denominator-name: "half";     }
		@else if $denominator == 3  { $denominator-name: "third";    }
		@else if $denominator == 4  { $denominator-name: "quarter";  }
		@else if $denominator == 5  { $denominator-name: "fifth";    }
		@else if $denominator == 6  { $denominator-name: "sixth";    }
		@else if $denominator == 7  { $denominator-name: "seventh";  }
		@else if $denominator == 8  { $denominator-name: "eighth";   }
		@else if $denominator == 9  { $denominator-name: "ninth";    }
		@else if $denominator == 10 { $denominator-name: "tenth";    }
		@else if $denominator == 11 { $denominator-name: "eleventh"; }
		@else if $denominator == 12 { $denominator-name: "twelfth";  }
		@else {
			@warn "Named denominator for ‘#{$denominator}’ is not supported";
		}

		// Determine if a plural or not
		@if $numerator > 1 {
			@return $numerator-name +"-"+ $denominator-name +"s";
		}

		@return $numerator-name +"-"+ $denominator-name;
	}
	@else {
		// Determine if a fraction or a whole
		@if $denominator > 1 {
			@return $numerator +"-"+ $denominator;
		}

		@return 1;
	}
}

// FUNCTION namespace-gen
//
// Conditionally append the namespace

@function namespace-gen ($alternative:false, $include-hyphen:true) {
	@if $use-grid-namespace {
		@if $include-hyphen {
			@return $namespace +"-";
		}

		@return $namespace;
	}
	@else if $alternative != false {
		@return $alternative;
	}

	@return "";
}

// ------------------
// Grid System Mixins
// ------------------

// MIXIN new-grid
//
// Include breakpoint grid generation for a type

@mixin new-grid ($grids:$grids-base, $cur-breakpoint:"") {
	// Only generate if we need to have 100% wide unit classes
	@if $mobile-first == false {
		#{class-gen($cur-breakpoint + namespace-gen() + ratio-gen(1, 1))} {
			width: 100%;
		}
	}

	// Iterate through each grid item
	@each $grid in $grids {
		@include new-grid-set($grid, $cur-breakpoint);
	}
}

// MIXIN new-grid-set
//
// This is the core logic that generates all the grid ratios. It stores a copy
// of the generated ratio in a global variable for later comparison. If the
// option to ignore duplicates is enabled, it uses this global variable to
// ignore generating the class. If the option is disabled, it uses the global
// variable to @extend the existing definition rather than define it again.

@mixin new-grid-set ($denominator, $cur-breakpoint:"", $offset-type:"") {
	// THOUGHT: Sass 3.3 Maps will likely be helpful here
	// Loop through each numerator value except the equivalent of 100%
	@for $numerator from 1 through ($denominator - 1) {
		$percentage: percentage($numerator / $denominator);
		$ratio:      ratio-gen($numerator, $denominator);
		$base-name:  $offset-type + $cur-breakpoint;

		// Check the lookup list for an existing entry
		$existing:   index($_percentages, $base-name + $percentage);
		$new-class:  $base-name + namespace-gen() + $ratio;

		@if $existing == false {
			// Store the new values in the lookup list
			$_percentages: append($_percentages, $base-name + $percentage);
			$_ratios:      append($_ratios, $ratio);
		}

		// Although it may seem that you could combine these two sets of
		// statements, this produces duplicates and other unwanted side
		// effects due to the use of extend on multiple classes at once
		@if $use-static-classes {
			.#{$new-class} {
				@include grid-set-data(".", $base-name, $existing, $offset-type, $percentage);
			}
		}

		@if $use-silent-classes {
			%#{$new-class} {
				@if $use-static-classes {
					// Avoid an issue with over-generating classes when both static and silent
					@extend #{"."+ $base-name + namespace-gen() + $ratio};
				}
				@else {
					@include grid-set-data("%", $base-name, $existing, $offset-type, $percentage);
				}
			}
		}
	}
}

// MIXIN grid-set-data
//
// The core logic for the new-grid-set mixin, this does double duty as both
// normal grids (width) or offset modifiers (push, pull etc).

@mixin grid-set-data ($class-type, $base-name, $existing, $offset-type, $percentage) {
	@if $existing != false and $ignore-duplicates == false {
		// Extend the existing class
		@extend #{$class-type + $base-name + namespace-gen() + nth($_ratios, $existing)};
	}
	@else if $existing == false {
		@if $offset-type == "" {
			// Create a new class value and store the new values
			width: $percentage;
		}
		@else {
			// Create a new class value and store the new values
			@include silent-relative();

			@if      ($offset-type == "push--"   ) { margin-left:  $percentage; }
			@else if ($offset-type == "pull--"   ) { margin-right: $percentage; }
			@else if ($offset-type == "shift--"  ) { left:         $percentage; }
			@else if ($offset-type == "unshift--") { right:        $percentage; }
		}
	}
}

// MIXIN silent-relative
//
// Drop relative positioning into silent classes which can't take advantage of
// the `[class*="push--"]` and `[class*="pull--"]` selectors.

@mixin silent-relative () {
	@if $use-silent-classes {
		position: relative;
	}
}

// MIXIN push-pull
//
// Generates push and pull grids, and if not using silent classes, it also
// creates a general catch-all class to position them relatively. Not the
// best of selectors, but one which avoids having position relative all over
// the place unless necessary.

@mixin push-pull ($type, $cur-breakpoint:"", $cur-grids:"") {
	@if $use-silent-classes != true and $cur-breakpoint == "" {
		// Not a great selector, but the alternative is position: relative on
		// ALL the things... still, with gzipping that may be preferable?
		[class*="#{$type}--"] {
			position: relative;
		}
	}

	@if $cur-grids == "" {
		$cur-grids: $offsets-base;
	}

	@if $cur-grids != (0) {
		@each $grid in $cur-grids {
			@if $cur-breakpoint == "" {
				@include new-grid-set($grid, "", $type +"--");
			}
			@else {
				@include new-grid-set($grid, $cur-breakpoint +"--", $type +"--");
			}
		}
	}
}

// MIXIN new-gutter
//
// Generate gutters, either equal or offset.

@mixin new-gutter ($cur-gutter:$gutter, $cur-type:$gutter-type) {
	display: block;
	width: auto;

	@if $cur-type == "equal" {
		margin-left:  (-$cur-gutter / 2);
		margin-right: (-$cur-gutter / 2);
	}
	@else if $cur-type == "offset" {
		margin-left: -$cur-gutter;
		margin-right: 0;
	}
	@else if $cur-type == "none" {
		margin-left: 0;
		margin-right: 0;
	}

	#{class-gen($namespace +"__item", "> ")} {
		@if $cur-type == "equal" {
			padding-left:  ($cur-gutter / 2);
			padding-right: ($cur-gutter / 2);
		}
		@else if $cur-type == "offset" {
			padding-left: $cur-gutter;
			padding-right: 0;
		}
		@else if $cur-type == "none" {
			padding-left: 0;
			padding-right: 0;
		}
	}
}

// MIXIN new-gutter-modifier
//
// Generate gutters adjusted and versions with modifiers as well if enabled.

@mixin new-gutter-modifier ($cur-type) {
	#{class-gen($namespace +"--gutter-"+ $cur-type)} {
		@include new-gutter($gutter, $cur-type);
	}

	// Generate the variations only if specified to do so
	@if $use-gutter-widths and $cur-type != "none" {
		#{class-gen($namespace +"--gutter-"+ $cur-type +"-wide")} {
			@include new-gutter($gutter * 2, $cur-type);
		}

		#{class-gen($namespace +"--gutter-"+ $cur-type +"--narrow")} {
			@include new-gutter($gutter / 2, $cur-type);
		}
	}
}

// MIXIN align-horizontal
//
// As it says on the tin

@mixin align-horizontal ($align-type) {
	// Due to the way Sass optimises things it seems, children being inside is
	// necessary to avoid issues when both class types are enabled.
	#{class-gen($namespace +"--"+ $align-type)} {
		text-align: #{$align-type};

		#{class-gen($namespace +"__item", "> ")} {
			text-align: left;
		}
	}
}

// MIXIN align-vertical
//
// Also as it says on the tin

@mixin align-vertical ($align-type) {
	// Due to the way Sass optimises things it seems, children being inside is
	// necessary to avoid issues when both class types are enabled.
	#{class-gen($namespace +"--"+ $align-type)} {
		vertical-align: #{$align-type};

		#{class-gen($namespace +"__item", "> ")} {
			vertical-align: #{$align-type};
		}
	}

	#{class-gen($namespace +"__item--"+ $align-type)} {
		vertical-align: #{$align-type};
	}
}

// ========================
// Generate the Grid System
// ========================

// Work around an issue where only one media query is present
@if $responsive and length(nth($breakpoints, 1)) == 1 {
	$breakpoints: append((), $breakpoints);
}

// Base grid container and item classing
#{class-gen($namespace)}, #{class-gen($namespace +"__item")} {
	margin: 0;
	vertical-align: top;

	-webkit-box-sizing: border-box;
	   -moz-box-sizing: border-box;
	        box-sizing: border-box;
}
#{class-gen($namespace)} {
	// If we are using guttering by default, include it here
	@if $gutter-type != none {
		@include new-gutter();
	}
	@else {
		display: inline-block;
	}

	width: 100%;
	padding: 0;
	font-size: 0;

	#{class-gen($namespace, "> ")} {
		display: inline-block;
		margin: 0;
	}
}
#{class-gen($namespace +"__item")} {
	display: inline-block;
	font-size: 1rem;

	@if $mobile-first {
		width: 100%;
	}
}

// ---------------------
// Grid System Modifiers
// ---------------------

// Modifiers: Grid Guttering
@if $use-gutter-none   { @include new-gutter-modifier("none");   }
@if $use-gutter-equal  { @include new-gutter-modifier("equal");  }
@if $use-gutter-offset { @include new-gutter-modifier("offset"); }

// Modifiers: Horizontal
@if $use-align-horizontal {
//	@include align-horizontal("left");
	@include align-horizontal("center");
	@include align-horizontal("right");
}

// Modifiers: Vertical
@if $use-align-vertical {
	@include align-vertical("top");
	@include align-vertical("middle");
	@include align-vertical("bottom");
}

// Modifiers: Reverse
@if $use-reversible {
	#{class-gen($namespace +"--rev")} {
		direction: rtl;
		text-align: left;

		#{class-gen($namespace, "> ")},
		#{class-gen($namespace +"__item", "> ")} {
			direction: ltr;
			text-align: left;
		}

		#{class-gen($namespace +"--rev", "> ")} {
			direction: rtl;
			text-align: left;
		}
	}
}

// -----------------
// Grid System Grids
// -----------------

// Generate our regular grid classes, which are not inside a media query
/* Grid: base */
@include new-grid();

// Generate our responsive grid classes, wrapping them in a media query
@if $responsive {
	// Sanity check
	@if length($breakpoints) == 0 {
		@warn "Responsive grids were to be generated, but no breakpoints have been configured";
	}

	@each $breakpoint-set in $breakpoints {
		// Sanity check
		@if length($breakpoint-set) > 4 {
			@warn "Breakpoint ‘#{nth($breakpoint-set, 1)}’ may be missing a comma after its set";
		}

		/* Grid: #{nth($breakpoint-set, 1)} */
		@media #{nth($breakpoint-set, 2)} {
			@include new-grid(nth($breakpoint-set, 3), '#{nth($breakpoint-set, 1)}--');
		}
	}
}

// -------------------
// Grid System Offsets
// -------------------

// Generate offset classes, outside of a media query
/* Offset: base */
@if $offsets-base != (0) {
	@if $use-push    { @include push-pull("push"   ); }
	@if $use-pull    { @include push-pull("pull"   ); }
	@if $use-shift   { @include push-pull("shift"  ); }
	@if $use-unshift { @include push-pull("unshift"); }
}

// Generate offset classes, including any media queries
@if $responsive {
	@each $breakpoint-set in $breakpoints {
		$breakpoint-name: nth($breakpoint-set, 1);
		$grid-set: nth($breakpoint-set, 3);

		@if length($breakpoint-set) == 4 {
			$grid-set: nth($breakpoint-set, 4);
		}

		@if $grid-set != (0) {
			/* Offset: #{nth($breakpoint-set, 1)} */
			@media #{nth($breakpoint-set, 2)} {
				@if $use-push    { @include push-pull("push",    $breakpoint-name, $grid-set); }
				@if $use-pull    { @include push-pull("pull",    $breakpoint-name, $grid-set); }
				@if $use-shift   { @include push-pull("shift",   $breakpoint-name, $grid-set); }
				@if $use-unshift { @include push-pull("unshift", $breakpoint-name, $grid-set); }
			}
		}
	}
}