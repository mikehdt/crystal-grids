// Sanity checks
// -------------
@if length($crystal-grids) == 0 {
	@warn "No breakpoints have been configured. Grids cannot be generated.";
}

@if (not $name-grid-ratios and $ratio-style == "numbers") {
	@warn "Both named ratios and named grid ratios are set to false. This will cause sadness.";
}


// Global Variables
// ----------------
$_generated:   () !global;
$_gen-offset:  () !global;

// Grid System Functions
// ---------------------
@import "functions-namespace";
@import "functions-ratio";

// Grid System Mixins
// ------------------
@import "core-new-grid-set";
@import "core-new-grid";

@import "grid-align";
@import "grid-gutter";
@import "grid-offsets";
@import "grid-reversible";



// MIXIN logic-type
//
// Determine whether or not we are applying it to a parent or child element.
//
@mixin logic-type ($context:"parent") {
	@if $context == "parent" {
		display: flex;
		flex-wrap: wrap;
	}
}


// Base grid container and item classing
// -------------------------------------
#{class-gen($name-grid)},
#{class-gen($name-grid-item)} {
	box-sizing: border-box;
	vertical-align: top;
}

// Generate grid items first
#{class-gen($name-grid-item)} {
	@include logic-type("child");

	width: 100%;
	margin-left:  0;
	margin-right: 0;

	// This is part of the magic to get inline blocks to behave
	// This resets the font size on a child element
	font-size: $grid-size-reset;
}

// So that they can be overridden later...
#{class-gen($name-grid)} {
	@include logic-type();

	$default-gutter: map-get(map-get($crystal-grids, "default"), "gutter-width");

	@if $default-gutter {
		// Use the set default
		@include grid-gutter-item($default-gutter, $gutter-type);
	}
	@else {
		// Use the global default
		@include grid-gutter-item($gutter-width, $gutter-type);
	}

	padding-left:  0;
	padding-right: 0;

	// This is part of the magic to get inline-blocks to behave
	// This remove the space between elements
	font-size: 0;

	// Grids within grids
	#{class-gen($name-grid, "> ")} {
		@include logic-type("child");

		margin-left:  0;
		margin-right: 0;
	}
}

// Grid System Grids
// -----------------
@each $breakpoint-name, $breakpoint-set in $crystal-grids {
	$grids: map-get($breakpoint-set, "grids");

	/* === Grid: #{$breakpoint-name} === */
	@if $breakpoint-name == "default" {
		@include new-grid-set($grids, $breakpoint-set);
	}
	@else {
		$media-query: map-get($breakpoint-set, "media");

		@media #{$media-query} {
			@include new-grid-set($grids, $breakpoint-set, $breakpoint-name);
		}
	}
}