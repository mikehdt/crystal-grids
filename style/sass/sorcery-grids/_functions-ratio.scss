// FUNCTION ratio-gen
//
// Generate ratio names, either numeric or textual, depending on configuration.
//
@function ratio-gen ($numerator, $denominator) {
	@if not $use-ratio-numbers {
		$numerator-name:   "";
		$denominator-name: "";

		// Numerator
		@if      $numerator == 1  { $numerator-name: "one";      }
		@else if $numerator == 2  { $numerator-name: "two";      }
		@else if $numerator == 3  { $numerator-name: "three";    }
		@else if $numerator == 4  { $numerator-name: "four";     }
		@else if $numerator == 5  { $numerator-name: "five";     }
		@else if $numerator == 6  { $numerator-name: "six";      }
		@else if $numerator == 7  { $numerator-name: "seven";    }
		@else if $numerator == 8  { $numerator-name: "eight";    }
		@else if $numerator == 9  { $numerator-name: "nine";     }
		@else if $numerator == 10 { $numerator-name: "ten";      }
		@else if $numerator == 11 { $numerator-name: "eleven";   }
		@else if $numerator == 12 { $numerator-name: "twelve";   }
		@else if $numerator == 13 { $numerator-name: "thirteen"; }
		@else if $numerator == 14 { $numerator-name: "fourteen"; }
		@else if $numerator == 15 { $numerator-name: "fifteen";  }
		@else {
			@warn "Named numerator for `#{$numerator}` is not supported";
			@return false;
		}

		// Denominator
		@if      $denominator == 1  { $denominator-name: "whole";      }
		@else if $denominator == 2  { $denominator-name: "half";       }
		@else if $denominator == 3  { $denominator-name: "third";      }
		@else if $denominator == 4  { $denominator-name: "quarter";    }
		@else if $denominator == 5  { $denominator-name: "fifth";      }
		@else if $denominator == 6  { $denominator-name: "sixth";      }
		@else if $denominator == 7  { $denominator-name: "seventh";    }
		@else if $denominator == 8  { $denominator-name: "eighth";     }
		@else if $denominator == 9  { $denominator-name: "ninth";      }
		@else if $denominator == 10 { $denominator-name: "tenth";      }
		@else if $denominator == 11 { $denominator-name: "eleventh";   }
		@else if $denominator == 12 { $denominator-name: "twelfth";    }
		@else if $denominator == 13 { $denominator-name: "thirteenth"; }
		@else if $denominator == 14 { $denominator-name: "fourteenth"; }
		@else if $denominator == 15 { $denominator-name: "fifteenth";  }
		@else if $denominator == 16 { $denominator-name: "sixteenth";  }
		@else {
			@warn "Named denominator for `#{$denominator}` is not supported";
			@return false;
		}

		// Determine if a plural or not
		@if $numerator > 1 {
			@return $numerator-name +"-"+ $denominator-name +"s";
		}

		@return $numerator-name +"-"+ $denominator-name;
	}
	@else {
		// Determine if a fraction or a whole
		@if $denominator > 1 {
			@return $numerator +"-"+ $denominator;
		}

		@return 1;
	}
}

// FUNCTION split-fraction
//
// Splits a string which contains a fraction represented by the form of either
// "x-y" or "x/y".
//
@function split-fraction ($haystack) {
	$needle:      null;
	$fraction:    ();
	$numerator:   0;
	$denominator: 0;

	@if str-index($haystack, "/") {
		$needle: "/";
	}
	@else if str-index($haystack, "-") {
		$needle: "-";
	}

	@if not $needle {
		@warn "No fractional component was found in `#{$haystack}`.";
		@return false;
	}

	$needle-pos:  str-index($haystack, $needle);
	$numerator:   str-slice($haystack, 1, $needle-pos - 1);
	$denominator: str-slice($haystack, $needle-pos + 1);

	@return (
		numerator:   to-number($numerator),
		denominator: to-number($denominator)
	);
}

// FUNCTION to-number
//
// A simplified implementation of the number conversion function from
// @HugoGiraudel at http://hugogiraudel.com/2014/01/15/sass-string-to-number/
// as here we only need to worry about positive integers.
//
@function to-number ($string) {
	// Matrices
	$strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
	$numbers:  0   1   2   3   4   5   6   7   8   9;

	// Result
	$result: 0;

	// Looping through all characters
	@for $i from 1 through str-length($string) {
		$character: str-slice($string, $i, $i);
		$index:     index($strings, $character);

		@if not $index {
			@warn "Could not convert character `#{$character}` to a number.";
			@return false;
		}

		$number: nth($numbers, $index);

		// Keep incrementing by 10 for numbers greater than 9
		@if $result != 0 {
			$result: $result * 10;
		}

		$result: $result + $number;
	}

	@return $result;
}